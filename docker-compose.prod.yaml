services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gonotes-postgres-prod
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - gonotes-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: gonotes-redis-prod
    restart: always
    env_file:
      - .env
    command: >
      sh -c "
      if [ -n \"$$REDIS_PASSWORD\" ]; then
        redis-server --requirepass \"$$REDIS_PASSWORD\"
      else
        redis-server
      fi
      "
    volumes:
      - redis_data_prod:/data
    networks:
      - gonotes-network
    healthcheck:
      test: >
        sh -c "
        if [ -n \"$$REDIS_PASSWORD\" ]; then
          redis-cli -a \"$$REDIS_PASSWORD\" ping
        else
          redis-cli ping
        fi
        "
      interval: 30s
      timeout: 10s
      retries: 3

  # GoNotes Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gonotes-app-prod
    restart: always
    env_file:
      - .env
    environment:
      APP_PORT: 8080
      APP_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE: ${JWT_EXPIRE:-15m}
      REFRESH_EXPIRE: ${REFRESH_EXPIRE:-7d}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-60}
      CORS_ALLOW_ORIGINS: ${CORS_ALLOW_ORIGINS}
      MIGRATE_URL: "postgres://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gonotes-network
    # Run migrations then start app
    command: sh -c "migrate -path migrations -database $$MIGRATE_URL up && ./main"

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: gonotes-nginx-prod
    restart: always
    env_file:
      - .env
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/letsencrypt:ro
      - certbot_www:/var/www/certbot:ro
    depends_on:
      - app
    networks:
      gonotes-network:
        aliases:
          - app
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot:latest
    container_name: gonotes-certbot-prod
    restart: "no"
    env_file:
      - .env
    volumes:
      - certbot_www:/var/www/certbot:rw
      - certbot_conf:/etc/letsencrypt:rw
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  gonotes-network:
    driver: bridge

volumes:
  postgres_data_prod:
  redis_data_prod:
  certbot_www:
  certbot_conf: